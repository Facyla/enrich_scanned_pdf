{
  "metadata": {
    "format": "PDF 1.5",
    "title": "CS Project - Neural Networks",
    "author": "",
    "subject": "",
    "keywords": "",
    "creator": "LaTeX with hyperref",
    "producer": "pdfTeX-1.40.26",
    "creationDate": "D:20241117181645Z",
    "modDate": "D:20241117181645Z",
    "trapped": "",
    "encryption": null,
    "file_path": "input.pdf",
    "page_count": 13,
    "page": 13
  },
  "toc_items": [
    [
      1,
      "Reflection and Analysis",
      13
    ],
    [
      2,
      "Design",
      13
    ],
    [
      2,
      "Code",
      13
    ],
    [
      2,
      "Possible Improvements",
      13
    ]
  ],
  "tables": [],
  "images": [],
  "graphics": [],
  "text": "## 4 Reflection and Analysis\n\n### 4.1 Design\n\nESP32 board is autonomous: once powered, it connects itself to wifi and to Spotify.\nApart from a small led screen, this LCD screen is the best option we have for displaying\ntext in this project. LCD is a very old technology that\u2019s considered obsolete, but I think that\nin the context of an audio player, this screen has charm and is a throwback to vintage players;\nit could make a nice desktop decoration!\n\n### 4.2 Code\n\nThe code is functional once you\u2019ve given it a valid AccessToken, but that doesn\u2019t mean it\u2019s\nperfect: The tooken has a lifetime of one hour, after which you need to get a new one on your\ncomputer, modify the code and compile the project... These limitations mean that the code\nloses its autonomy.\nThe addition of favorite sounds is a good feature, but there could be others, such as skip\nsound, play previous etc...\n\n### 4.3 Possible Improvements\n\n  - A more robust solution would implement automatic token refresh using the refresh token\nprovided during the initial OAuth flow. This could be\n\n  - achieved by storing the refresh token in the ESP32\u2019s non-volatile memory and implementing a background process to manage token lifecycle.\n\n  - The project could benefit from implementing additional playback controls such as play/pause, skip track, and volume adjustment. This could be achieved through either additional buttons or by implementing a more complex input system using the existing\nbutton (e.g., different actions for single press, double press, and long press).\n\n  - The current design requires hardcoding of WiFi credentials and Spotify tokens directly\nin the code. This makes it difficult to modify these settings without recompiling and\nreflashing the device. A more flexible approach would be to implement a configuration\nportal that allows users to update these settings through a web interface when the device\nenters a setup mode. This would make the device more user-friendly and adaptable to\ndifferent networks or user accounts.\n\n12\n\n\n-----\n\n",
  "words": []
}