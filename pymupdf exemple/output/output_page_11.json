{
  "metadata": {
    "format": "PDF 1.5",
    "title": "CS Project - Neural Networks",
    "author": "",
    "subject": "",
    "keywords": "",
    "creator": "LaTeX with hyperref",
    "producer": "pdfTeX-1.40.26",
    "creationDate": "D:20241117181645Z",
    "modDate": "D:20241117181645Z",
    "trapped": "",
    "encryption": null,
    "file_path": "input.pdf",
    "page_count": 13,
    "page": 11
  },
  "toc_items": [
    [
      2,
      "spotify.cpp",
      11
    ],
    [
      3,
      "Spotify API Functions",
      11
    ],
    [
      2,
      "get_token.py",
      11
    ]
  ],
  "tables": [],
  "images": [],
  "graphics": [],
  "text": "### 3.3 spotify.cpp\n\n**3.3.1** **Spotify API Functions**\n\nTheses functions are responsible for interacting with the Spotify Web API to fetch the currently playing track and add a track to the user\u2019s liked songs. These functions use the\n```\nHTTPClient library to make HTTP requests and the ArduinoJson library to parse JSON\n\n```\nresponses.\nBy the way, a SpotifyAPI library already exists so this implementation is not the best\nway to interact with the app but it\u2019s more a way to experiment API for the project :)\n\n`getCurrentPlay() function:` The getCurrentPlay() function is responsible for fetching the currently playing track information from the Spotify API. It constructs the API URL\nfor the currently playing track endpoint and initializes an HTTP request using the HTTPClient\nclass. The function adds an authorization header containing the access token to authenticate\nthe request. It then sends an HTTP GET request and checks the response code.\n\n`addTrackToLiked() function:` The addTrackToLiked() function adds a specified track\nto the user\u2019s liked songs on Spotify. It constructs the API URL for the add track endpoint,\nincluding the track ID as a query parameter. The function initializes an HTTP request using\nthe HTTPClient class and adds an authorization header with the access token. It sends an\nHTTP PUT request and checks the response code.\n\n`Handle errors:` Both functions include error handling mechanisms to manage unsuccessful HTTP requests. In getCurrentPlay(), if the HTTP GET request does not return a\n200 (OK) response code, the function prints an error message and the response code to the\nserial monitor, and returns an error string (\u201derror\u201d). Similarly, in addTrackToLiked(), if the\nHTTP PUT request does not return a 200 (OK) or 201 (Created) response code, the function\nprints an error message and the response code to the serial monitor, and returns the response\ncode.\n\n### 3.4 get token.py\n\nSpotify API is a authorisation-based API, so we need a token to use it freely. Since Spotify use\nOAuth 2.0, handling the authentication process directly on the ESP32 is technically possible\nbut impractical and pretty for long for this project and material : The process requires user\ninteraction to log in and authorize the app, The Spotify API requires a callback URL to send\nthe authorization code. The ESP32 lacks the capability to handle such redirects...\nTo simplify this, we process the authentication part on a computer using a Python script.\nOnce the access token is obtained, it can be used by the ESP32 to make authenticated requests\nto the Spotify API.\n\n10\n\n\n-----\n\n",
  "words": []
}